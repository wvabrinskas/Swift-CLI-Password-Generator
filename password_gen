#!/usr/bin/env swift
import Foundation 


func generateWord(length: Int, special: Bool, onlyNumbers: Bool) -> String {

    let charsLower = "abcdefghijklmnopqrstuvwxyz"
    let charsUpper = charsLower.uppercased()
    let integers = "0123456789"
    let symbols = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"

    var chars = charsLower + charsUpper + integers

    if special {
        chars += symbols
    }

    if onlyNumbers {
        chars = integers
    }

    let wordLength = length
    var word = ""
    for _ in 0...wordLength {
        let char = Int.random(in: 1..<chars.count)
    
        let lowerBound = chars.index(chars.startIndex, offsetBy: char - 1)
        let upperBound = chars.index(chars.startIndex, offsetBy: char)

        word += chars[lowerBound..<upperBound]
    }
    return word
}

func start(words: Int, length: Int = Int.random(in: 16...24), special: Bool = true, onlyNumbers: Bool = false) {
    for _ in 0..<words {
        print(generateWord(length: length, special: special, onlyNumbers: onlyNumbers))
    }
}

enum Args: String {
    case words = "--word-count"
    case length = "--length"
    case special = "--no-special"
    case numbers = "--only-numbers"
}

let special: Bool = !CommandLine.arguments.contains(Args.special.rawValue)
let onlyNumbers: Bool = CommandLine.arguments.contains(Args.numbers.rawValue)

var words = 1
var length = Int.random(in: 16...24)

if let index = CommandLine.arguments.firstIndex(where: { $0 == Args.words.rawValue }), 
               CommandLine.arguments.count > index + 1, 
               let value = Int(CommandLine.arguments[index + 1]) { 
                   
    words = value
} 

if let lengthIndex = CommandLine.arguments.firstIndex(where: { $0 == Args.length.rawValue }), 
               CommandLine.arguments.count > lengthIndex + 1, 
               let value = Int(CommandLine.arguments[lengthIndex + 1]) { 
    length = value
}

start(words: words, length: length, special: special, onlyNumbers: onlyNumbers)

